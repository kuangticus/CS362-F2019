        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// tesing the the baronCard function using this unit test
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:
        1:   11:int main() {
        -:   12:    int i;
        1:   13:    int seed = 1000;
        1:   14:    int numPlayer = 2;
        1:   15:    int p = 0, maxHandCount = 5;
        -:   16:
        1:   17:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   18:                , remodel, smithy, estate, baron, great_hall};
        -:   19:    struct gameState G;
        -:   20:    
        -:   21:
        1:   22:    int testHand[maxHandCount];
        1:   23:    testHand[0] = baron;  // places baron in test
        1:   24:    testHand[1] = copper; // places copper
        1:   25:    testHand[2] = estate; // places estate
        1:   26:    testHand[3] = estate;
        1:   27:    testHand[4] = mine;     // places mine 
        -:   28:    
        -:   29:
        1:   30:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   31:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
        1:   32:    G.deckCount[p] = maxHandCount;                 // set the number of cards on hand
        1:   33:    memcpy(G.deck[p], testHand, sizeof(int) * maxHandCount); //1 baron, 1 copper, 2 estates, 1 mine
        6:   34:    for (i = 0; i < 5; i++) // draws the only five cards that are in the player's deck
        -:   35:    {
        5:   36:        drawCard(p, &G);
        -:   37:    }
        -:   38:
        1:   39:    printf("I will be testing the the baron case statement in cardEffect(). \n");
        1:   40:    int numEstate = G.supplyCount[estate];
        1:   41:    int firstDeckCount = G.deckCount[p];
        -:   42:
        1:   43:    baronCard(0, 1, &G);
        -:   44:
        -:   45:    // custom assert for checking whether the code is working
        -:   46:    // will print the correct if the number of buy is correct ow wrong
        -:   47:    // limitation is that this test only works with initial setup where one buy is known
        1:   48:    if ( G.numBuys == 2 ) printf( "%d%s", G.numBuys, " buys is correct!\n"); 
        1:   49:    else printf( "%d%s", G.numBuys, " buys is wrong!\n");
        -:   50:
        -:   51:    //customr assert, to check the amount of estate cards that are still there
        -:   52:    // the supply should have one less than before and handcount should be one more too 
        1:   53:    if ( G.supplyCount[estate] == numEstate-1 && G.deckCount[p] == firstDeckCount + 1 ) 
    #####:   54:        printf("%d %d%s", G.supplyCount[estate], G.deckCount[p], "  # of estate cards in supply and current player deck is correct.\n");
        -:   55:    else 
        1:   56:        printf("%d %d%s", G.supplyCount[estate], G.deckCount[p], "  # of estate cards in supply and current player deck is wrong.\n");
        -:   57:
        1:   58:    printf("Done with testing baron card function!\n");
        -:   59:}
