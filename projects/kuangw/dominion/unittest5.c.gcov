        -:    0:Source:unittest5.c
        -:    0:Graph:unittest5.gcno
        -:    0:Data:unittest5.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Unit test the mineCard function for functionality
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:
        1:   10:int main() {
        -:   11:    int i;
        1:   12:    int seed = 1000;
        1:   13:    int numPlayer = 2;
        1:   14:    int maxHandCount = 5, p = 0;
        -:   15:
        1:   16:    int k[10] = {adventurer, council_room, feast, ambassador, mine
        -:   17:                , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState G;
        -:   19:    
        1:   20:    int testHand[maxHandCount];
        1:   21:    testHand[0] = mine;  // mine card in hand
        5:   22:    for ( i = 1; i < maxHandCount; i++){
        4:   23:        testHand[i] = copper; // silver treasure (4) cards
        -:   24:    }
        -:   25:    
        1:   26:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   27:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
        1:   28:    G.deckCount[p] = maxHandCount;                 // set the number of cards on hand
        1:   29:    memcpy(G.deck[p], testHand, sizeof(int) * maxHandCount); //4 coppers 
        -:   30:
        1:   31:    printf("I will be testing the mineCard function. \n");
        -:   32:
        1:   33:    mineCard(testHand[2], gold, 0, 0, &G);
        -:   34:
        -:   35:    // Checks to see if the cards can be added when the card i am trading for is more than 3x as much
        1:   36:    int count = 0;
        6:   37:    for ( i = 0; i < G.handCount[0]; i++){
        5:   38:        if ( G.hand[0][i] == gold)
        2:   39:            count += 1;
        -:   40:    }
        -:   41:
        -:   42:    // this statements check to see if the gold was added from trading copper, the thing should
        -:   43:    // say that it is traded correctly since that the bug that i am trying to expose
        1:   44:    if ( count >= 1 ){
        1:   45:        printf("%s\n", "Gold was added even though we used copper to trade up.");
        -:   46:         // this if statement will check to see if we are than one cards added from the trade
        1:   47:        if( count > 1)
        1:   48:            printf("%d%s\n", count, " cards where added." );
        -:   49:    }
        -:   50:    else
    #####:   51:        printf("%s\n", "Nothing was added and the program is working");
        -:   52:    
        1:   53:    printf("Done with testing the mine card!\n");
        -:   54:}
