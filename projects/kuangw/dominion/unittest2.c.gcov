        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Unit testing minion Function for functionality
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:
        1:    9:int main() {
        -:   10:    int i;
        1:   11:    int seed = 1000;
        1:   12:    int numPlayer = 2;
        1:   13:    int maxHandCount = 5;
        -:   14:
        1:   15:    int k[10] = {adventurer, council_room, minion, ambassador, mine
        -:   16:                , remodel, smithy, village, baron, great_hall};
        -:   17:    struct gameState G;
        -:   18:    
        1:   19:    int testHand[maxHandCount];
        1:   20:    testHand[0] = minion;  // minion card in hand
        5:   21:    for ( i = 1; i < maxHandCount; i++){
        4:   22:        testHand[i] = copper; // copper treasure (4) cards
        -:   23:    }
        -:   24:
        1:   25:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   26:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
        1:   27:    G.deckCount[0] = maxHandCount;
        1:   28:    memcpy(G.deck[0], testHand, sizeof(int) * maxHandCount); //4 coppers and minion
        -:   29:    
        1:   30:    printf("I will be testing the minion card function. \n");
        -:   31:
        1:   32:    int amtCoins = G.coins;
        1:   33:    minionCard(1, 0, 0, 0, &G);
        -:   34:    // checking that there 2 coins added like there should be from the card rule
        -:   35:    // if the incorrect amount of coins are added the code will say how much extra is added
        1:   36:    if (G.coins == amtCoins + 2)
    #####:   37:        printf("%s", "2 coins were correctly added to the current player!\n");
        -:   38:    else
        1:   39:        printf( "%d%s", G.coins - amtCoins - 2, " extra coins were added\n");
        -:   40:
        -:   41:
        1:   42:    printf("I will be testing the minion card function. \n");
        1:   43:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   44:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
        1:   45:    G.deckCount[0] = maxHandCount;
        1:   46:    memcpy(G.deck[0], testHand, sizeof(int) * maxHandCount); //4 coppers and minion
        1:   47:    memcpy(G.deck[1], testHand, sizeof(int) * maxHandCount); 
        -:   48:
        4:   49:    for (i = 0; i < 3; i++) // draws the only 2 card for player 2
        -:   50:    {
        3:   51:        drawCard(1, &G);
        -:   52:    }
        -:   53:
        1:   54:    minionCard(2, 0, 0, 0, &G);
        -:   55:
        -:   56:    // this will test whether the code is working so that when ther people with more than 5 card will get
        -:   57:    // their hand replaced, people with less than 4 cards will not have to get their hand replaced
        -:   58:    // for the bug I implanted people with more than 2 have to replace their hand.
        1:   59:    if ( G.handCount[1] > 2)
        1:   60:        printf("%s", "Someone with less than 4 cards had to replace their cards when they don't have to.\n");
        -:   61:    else
    #####:   62:        printf("%s", "The program is working like it should be.\n");
        -:   63:
        1:   64:    return 0;
        -:   65:    
        -:   66:}
