        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// unit testing the ambassador function and functionality and for bugs
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:
        1:    9:int main() {
        -:   10:    int i;
        1:   11:    int seed = 1000;
        1:   12:    int numPlayer = 2;
        1:   13:    int maxHandCount = 5;
        -:   14:
        1:   15:    int k[10] = {adventurer, council_room, minion, ambassador, mine
        -:   16:                , remodel, smithy, village, baron, great_hall};
        -:   17:    struct gameState G;
        -:   18:    
        1:   19:    int testHand[maxHandCount];
        1:   20:    testHand[0] = ambassador;  // minion card in hand
        5:   21:    for ( i = 1; i < maxHandCount; i++){
        4:   22:        testHand[i] = estate; // 4 curse cards
        -:   23:    }
        -:   24:
        1:   25:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   26:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
        1:   27:    G.deckCount[0] = maxHandCount;
        1:   28:    memcpy(G.deck[0], testHand, sizeof(int) * maxHandCount); // 4 curse cards and ambassador
        1:   29:    memcpy(G.deck[1], testHand, sizeof(int) * maxHandCount); // 4 curse cards and ambassador
        -:   30:
        6:   31:    for (i = 0; i < 5; i++) // draws 5 cards for the 2nd player
        -:   32:    {
        5:   33:        drawCard(1, &G);
        -:   34:    }
        -:   35:
        1:   36:    printf("I will be testing the ambassador function out. \n");
        1:   37:    int oldSupply =  G.supplyCount[estate];
        1:   38:    int oldDeckCount = G.deckCount[1];
        -:   39:
        1:   40:    ambassadorCard(curse, 2, 0, 0, &G);
        -:   41:
        -:   42:    // these asserts test whether the # of discarded cards will return to the stockpile
        1:   43:    if ( G.supplyCount[estate] == oldSupply + 2 )
    #####:   44:        printf("%s\n", "We are expecting the supply of estates to increase by 2.");
        -:   45:    else
        1:   46:        printf("%s\n", "The stockpile of estate cards increased by more than 2.");
        -:   47:
        -:   48:    // This will test whether the function adds cards correctly to other players +1
        1:   49:    if ( G.deckCount[1] == oldDeckCount + 1 )
    #####:   50:        printf("%s\n", "The correct amount of cards discard got added to other players.");
        -:   51:    else
        1:   52:        printf("%s\n", "The incorrect amount of cards discard got added to other players. More than one got added.");
        -:   53:
        1:   54:    return 0 ;
        -:   55:}
        -:   56:
