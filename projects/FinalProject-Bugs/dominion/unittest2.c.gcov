        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
function main called 1 returned 100% blocks executed 87%
        1:    9:int main() {
        -:   10:    int i;
        1:   11:    int seed = 1000;
        1:   12:    int numPlayer = 2;
        1:   13:    int maxHandCount = 5, cp = 0; // cp is current player
        -:   14:
        1:   15:    int k[10] = {adventurer, council_room, feast, ambassador, mine
        -:   16:                , remodel, smithy, village, baron, great_hall};
        -:   17:    struct gameState G;
        -:   18:    
        1:   19:    int testHand[maxHandCount];
        1:   20:    testHand[0] = mine;  // mine card in hand
        5:   21:    for ( i = 1; i < maxHandCount; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   22:        testHand[i] = copper; // silver treasure (4) cards
        -:   23:    }
        -:   24:    
        1:   25:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   26:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        1:   27:    G.deckCount[cp] = maxHandCount;                 // set the number of cards on hand
        1:   28:    memcpy(G.hand[cp], testHand, sizeof(int) * maxHandCount);  
        -:   29:
        -:   30:    // test should work but since my test is reliant on these working I have to test
        1:   31:    printf("Testing to see if getCost() is working correctly.\n");
call    0 returned 100%
        1:   32:    if ( getCost(gold) ==  6 && getCost(silver) ==  3 && getCost(copper) ==  0 )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        1:   33:        printf("getCost() is working correctly.\n");
call    0 returned 100%
        -:   34:    
        1:   35:    assert( getCost(gold) ==  6); // this wil simply check to see if the cost getting is correct for gold
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   36:    assert( getCost(silver) ==  3); // this wil simply check to see if the cost getting is correct for silver
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   37:    assert( getCost(copper) ==  0); // this wil simply check to see if the cost getting is correct for copper
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   38:    printf("getCost() is working correctly.\n");
call    0 returned 100%
        -:   39:
        -:   40:    // test should work but since my test is reliant on these working I have to test
        1:   41:    printf("Testing to see if gainCard() and discardCard() is working correctly.\n");
call    0 returned 100%
        -:   42:    //test the gain card function for what its supposed to do 
        1:   43:    int tempNum = G.handCount[cp];
        1:   44:    gainCard(baron, &G, 2, cp);
call    0 returned 100%
        1:   45:    if ( G.handCount[cp] == tempNum + 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   46:        printf("gainCard() is working correctly.\n"); 
call    0 returned 100%
        1:   47:    assert( G.handCount[cp] == tempNum + 1 ); // asserting to see if the cards are added correctly
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   48:    
        -:   49:    // testing the discard card function to see if it works correctly
        1:   50:    discardCard(6, cp, &G, 1);
call    0 returned 100%
        1:   51:    tempNum = G.handCount[cp];
        -:   52:    // asserting to see if the the functin can remove cards correctly.
        1:   53:    if( G.handCount[cp] == tempNum )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   54:        printf("discardCard() is working correctly.\n");
call    0 returned 100%
        1:   55:    assert( G.handCount[cp] == tempNum ); 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   56:    printf("End of testing gainCard() and discardCard().\n");
call    0 returned 100%
        -:   57:
        -:   58:
        1:   59:  printf("Testing to see if cardEffect() mine case is working correctly.\n");
call    0 returned 100%
        -:   60:    int bonus;
        -:   61:    // since we know that the only combination that should not work is the copper to gold
        1:   62:    int checkRet = cardEffect(G.hand[cp][0], 1 , gold, 0, &G, 0, &bonus);
call    0 returned 100%
        -:   63:
        1:   64:    int isThereGold = 0;
        5:   65:    for ( i =0; i< G.handCount[cp]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   66:        if ( G.hand[cp][i] == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   67:            isThereGold = 1;
        1:   68:    if ( isThereGold != 0 && checkRet != -1 )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   69:        printf("There is an issure with checking the for valud parameters\n");
call    0 returned 100%
        -:   70:
        1:   71:    if ( isThereGold == 0 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   72:        printf("The code is working correctly when faced with copper to gold trading.\n");
call    0 never executed
        -:   73:    else
        1:   74:        printf("The code is not working correctly when faced with copper to gold trading.\n");
call    0 returned 100%
        -:   75:
        1:   76:    if (checkRet == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   77:        printf("cardEffect() mine case is working correctly. Return 0\n");
call    0 never executed
        -:   78:    else
        1:   79:        printf("cardEffect() mine case is not working correctly. Return -1\n");
call    0 returned 100%
        -:   80:
        -:   81:
        1:   82:    return 0;
        -:   83:
        -:   84:}
