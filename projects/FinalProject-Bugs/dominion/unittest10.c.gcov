        -:    0:Source:unittest10.c
        -:    0:Graph:unittest10.gcno
        -:    0:Data:unittest10.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
function main called 1 returned 100% blocks executed 90%
        1:    8:int main() {
        1:    9:    int seed = 1000;
        1:   10:    int numPlayer = 2;
        1:   11:    int maxHandCount = 5, cp = 0; // cp is current player
        -:   12:
        1:   13:    int k[10] = {adventurer, council_room, feast, ambassador, mine
        -:   14:                , remodel, smithy, village, baron, curse};
        -:   15:    struct gameState G;
        -:   16:    
        -:   17:    // for current player
        1:   18:    int testHand[maxHandCount];
        1:   19:    testHand[0] = ambassador; 
        1:   20:    testHand[1] = copper;
        1:   21:    testHand[2] = baron;
        1:   22:    testHand[3] = estate;
        1:   23:    testHand[4] = curse;
        -:   24:
        1:   25:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   26:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        1:   27:    G.deckCount[cp] = maxHandCount;                 // set the number of cards on hand
        1:   28:    memcpy(G.hand[cp], testHand, sizeof(int) * maxHandCount); 
        -:   29:
        1:   30:    printf("Testing the cardEffect() case ambassador function.\n");
call    0 returned 100%
        -:   31:    
        -:   32:    int bonus;
        1:   33:    int checkRet = cardEffect(G.hand[cp][0], 4, 1, 0, &G, 0, &bonus);
call    0 returned 100%
        -:   34:
        -:   35:    // We are chcking the return value of returned is 0 since we know the error is
        -:   36:    // the paramater checking stage.
        1:   37:    if ( checkRet != 0 )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   38:        printf("There is an issue with the parameter checking.\n");
call    0 returned 100%
        -:   39:    
        1:   40:    if (checkRet == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   41:        printf("The code for checking parameters is working correcly.\n");
call    0 never executed
        -:   42:    else
        1:   43:        printf("The code for checking parameters is working incorrecly.\n");
call    0 returned 100%
        -:   44:
        1:   45:    return 0;
        -:   46:}
