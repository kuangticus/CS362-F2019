        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
function main called 1 returned 100% blocks executed 80%
        1:    9:int main() {
        -:   10:    int i;
        1:   11:    int seed = 1000;
        1:   12:    int numPlayer = 2;
        1:   13:    int maxHandCount = 5, cp = 0; // cp is current player
        -:   14:
        1:   15:    int k[10] = {adventurer, council_room, feast, ambassador, mine
        -:   16:                , remodel, smithy, village, baron, great_hall};
        -:   17:    struct gameState G;
        -:   18:    
        1:   19:    int testHand[maxHandCount];
        1:   20:    testHand[0] = mine;  // mine card in hand
        1:   21:    testHand[1] = copper;
        1:   22:    testHand[2] = silver;
        1:   23:    testHand[3] = estate;
        1:   24:    testHand[4] = estate;
        -:   25:
        1:   26:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   27:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        1:   28:    G.deckCount[cp] = maxHandCount;                 // set the number of cards on hand
        1:   29:    memcpy(G.hand[cp], testHand, sizeof(int) * maxHandCount);  
        -:   30:
        -:   31:    // test should work but since my test is reliant on these working I have to test
        1:   32:    printf("Testing to see if getCost() is working correctly.\n");
call    0 returned 100%
        -:   33:    
        1:   34:    assert( getCost(gold) ==  6); // this wil simply check to see if the cost getting is correct for gold
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   35:    assert( getCost(silver) ==  3); // this wil simply check to see if the cost getting is correct for silver
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   36:    assert( getCost(copper) ==  0); // this wil simply check to see if the cost getting is correct for copper
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   37:    printf("getCost() is working correctly.\n");
call    0 returned 100%
        -:   38:
        -:   39:    // test should work but since my test is reliant on these working I have to test
        1:   40:    printf("Testing to see if gainCard() and discardCard() is working correctly.\n");
call    0 returned 100%
        -:   41:    //test the gain card function for what its supposed to do 
        1:   42:    int tempNum = G.handCount[cp];
        1:   43:    gainCard(baron, &G, 2, cp);
call    0 returned 100%
        1:   44:    assert( G.handCount[cp] == tempNum + 1 ); // asserting to see if the cards are added correctly
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   45:    
        -:   46:    // testing the discard card function to see if it works correctly
        1:   47:    discardCard(6, cp, &G, 1);
call    0 returned 100%
        1:   48:    tempNum = G.handCount[cp];
        -:   49:    // asserting to see if the the functin can remove cards correctly.
        1:   50:    assert( G.handCount[cp] == tempNum ); 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   51:    printf("gainCard() and discardCard() is working correctly.\n");
call    0 returned 100%
        -:   52:
        1:   53:    printf("Testing the cardEffect() case statement mine.\n");
call    0 returned 100%
        -:   54:
        -:   55:    // swapping a sivler for gold
        1:   56:    int handInit = G.handCount[cp];
        -:   57:    int bonus;
        1:   58:    cardEffect(G.hand[cp][0], 2 , gold, 0, &G, 0, &bonus);
call    0 returned 100%
        -:   59:
        1:   60:    if ( handInit-1 ==  G.handCount[cp] )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   61:        printf("Removal logic is working!\n");
call    0 returned 100%
        -:   62:    else
    #####:   63:        printf("Removal logic is not working!\n");
call    0 never executed
        -:   64:
        1:   65:    int isThereGold = 0;
        5:   66:    for ( i =0; i< G.handCount[cp]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   67:        if ( G.hand[cp][i] == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   68:            isThereGold = 1;
        -:   69:    
        1:   70:    if (isThereGold == 1 )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   71:        printf("Removal logic is working! Correctly added gold.\n");
call    0 returned 100%
        -:   72:    else
    #####:   73:        printf("Removal logic is not working! Didn't add gold.\n");
call    0 never executed
        -:   74:
        -:   75:
        -:   76:
        1:   77:    return 0;
        -:   78:
        -:   79:}
